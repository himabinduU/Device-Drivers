/*   Title :~ Executing the Charector Driver Module(simple charector driver program for case conversion)  on Beagle Bone Black   */



1.) Partitioning of the microSD card for Beagle Bone Black.


	$ sudo fdisk /dev/sdX  
	
	> Create a boot partition by selecting n for ‘new’, then p for ‘primary’, and 1 to specify the first partition. 
	  Press enter to accept the default first sector and specify 4095 for the last sector. 
	$ n
	$ p
	$ 1
	$ (Press Enter)
	$ 4095
	
	> Change the partition type to FAT16 by selecting t for ‘type’ and e for ‘W95 FAT16 (LBA)’.
	$ t
	$ e

	> Set the partition bootable by selecting a then 1.
	 
	$ a
	$ 1

	> Next, create the data partition for the root filesystem by selecting n for ‘new’, then p for ‘primary’, and 2 to specify the second partition. 
	  Accept the default values for the first and last sectors by pressing enter twice.

	$ n
	$ p
	$ 2
	$ (Press Enter)
	$ (Press Enter)

	> Press p to ‘print’ the partition table. It should look similar to the one below.
	$ p

     ---------------------------------------------------------------------------------
     |	Disk /dev/sdb: 7948 MB, 7948206080 bytes                                     |
     |	255 heads, 63 sectors/track, 966 cylinders, total 15523840 sectors           | 
     | 	Units = sectors of 1 * 512 = 512 bytes                                       |
     |	Sector size (logical/physical): 512 bytes / 512 bytes                        |
     |	I/O size (minimum/optimal): 512 bytes / 512 bytes                            |
     |	Disk identifier: 0xafb3f87b                                                  |
     |                                                                               |
     |	   Device Boot      Start         End      Blocks   Id  System               |
     | 	   /dev/sdb1   *        2048        4095        1024    e  W95 FAT16 (LBA)   |
     | 	   /dev/sdb2            4096    15523839     7759872   83  Linux             |
     ---------------------------------------------------------------------------------
 	
 	> Finally, commit the changes by selecting w to ‘write’ the partition table and exit fdisk.

 	$ w

2.) Format the Partitions.
	
	> Format partition 1 as FAT by typing mkfs.vfat /dev/sdX1
	$ mkfs.vfat /dev/sdX1 

	> Format partition 2 as ext4 by typing mkfs.ext4 /dev/sdX2
	$ mkfs.ext4 /dev/sdX2

3.) Install u-boot to the microSD Card.

	$ wget http://s3.armhf.com/dist/bone/bone-uboot.tar.xz
	$ mkdir boot
	$ mount /dev/sdX1 boot
	$ tar xJvf bone-uboot.tar.xz -C boot
	$ umount boot

4.) Install the desired root filesystem and linux headers into the microSD Card.

	$ wget http://s3.armhf.com/dist/bone/ubuntu-trusty-14.04-rootfs-3.14.4.1-bone-armhf.com.tar.xz
	$ wget http://s3.armhf.com/dist/bone/linux-headers-3.14.4.1-bone-armhf.com.tar.xz
	$ mkdir rootfs
	$ mount /dev/sdX2 rootfs
	$ tar xJvf ubuntu-trusty-14.04-rootfs-3.14.4.1-bone-armhf.com.tar.xz -C rootfs
	$ tar xJvf linux-headers-3.14.4.1-bone-armhf.com.tar.xz -C rootfs
	$ umount rootfs

5.) Cross compiling the driver module code and user program code for executing on BBB.
	
	> Cross compiling the driver module.
	$ make -C usr/src/linux-3.14.4.1-bone-armhf.com M=$PWD ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- modules

	> Cross compiling the user program code(here mine is test.c file).
	$ arm-linux-gnueabihf-gcc test.c -o test -static

6.) Insert the micro SD into the BBB board and boot from SD card by pressing the switch 2 before pluging the power cable.

7.) Executing the driver module code and user code on BBB.

	> Inserting the already Cross Compiled driver code(here mine is driver_test.ko) into BBB.
	$ sudo insmod ./driver_test.ko

	> We can check whether the driver module is loaded or not by using lsmod command.
	$ lsmod | grep driver_test

	> Create a device node for the driver module using mknod command.
	$ sudo mknod /dev/mydev c 95 1
	 
	  /dev/mydev -> device name
	  c          -> For charector driver
	  95         -> Major number associated with the device
	  1          -> Minor number (i.e., number of devices associated with that particular driver)

	> Changing the permissions to the device node /dev/mydev which we created.
	$ sudo chmod 777 /dev/mydev

	> Now run the user program code which we wrote for case coversion. In my case the file_name is test.
	$ ./test

	> Remove the driver module which we have inserted. If we won't remove means kernel will automatically remove the module when system is rebooted.
	$ sudo rmmod driver_test
